package pl.polsl.java.lab3.tomasz.domaracki.JavaBillsCollectionView;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.security.auth.callback.ConfirmationCallback;
import javax.security.auth.callback.TextOutputCallback;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingWorker;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;
import pl.polsl.java.lab3.tomasz.domaracki.JavaBillsCollectionModel.Bill;
import pl.polsl.java.lab3.tomasz.domaracki.JavaBillsCollectionController.DatabaseController;
/**
 *
 * @author tomaszdomaracki
 * @version 1.0.0
 */
public class Gui extends javax.swing.JFrame{
    
    private final MenuItemsHandling menuItems;
    private DatabaseController db;
    private String selectedBillName;
    private final String defaultDbPath;
    private DefaultTreeModel treeModel;
    private File selectedBillPhoto;
    /**
     * Creates new form Gui
     */
    public Gui() {
        super("Your Java Bills Manager");
        db = new DatabaseController();
        menuItems = new MenuItemsHandling(db);
        initComponents();
        initToolbar();
        defaultDbPath = "resources/default.billdb";
        allBillsFromDatabaseTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        allBillsFromDatabaseTree.addTreeSelectionListener(new TreeSelectionListener() {
            
            @Override
            public void valueChanged(TreeSelectionEvent e) {
                handleValueChangeInTree();
            }
        });
        initTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        saveDbButton = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        allBillsFromDatabaseTree = new javax.swing.JTree();
        jPanel1 = new javax.swing.JPanel();
        placeForBillToShow = new javax.swing.JLabel();
        deviceNameLabel = new javax.swing.JLabel();
        dateOnBillLabel = new javax.swing.JLabel();
        endOfGuaranteeLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openDatabaseFileMenuItem = new javax.swing.JMenuItem();
        closeDatabaseFileMenuItem = new javax.swing.JMenuItem();
        saveDatabaseFileMenuItem = new javax.swing.JMenuItem();
        saveDatabaseOnServerFileMenuItem = new javax.swing.JMenuItem();
        exitMenuItemFileMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        addNewBillEditMenuItem = new javax.swing.JMenuItem();
        editBillEditMenuItem = new javax.swing.JMenuItem();
        deleteBillEditMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutHelpMenuItem = new javax.swing.JMenuItem();
        showLoggerHelpMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        jToolBar1.setRollover(true);

        saveDbButton.setForeground(new java.awt.Color(255, 255, 255));
        saveDbButton.setBorder(null);
        saveDbButton.setBorderPainted(false);
        saveDbButton.setMaximumSize(new java.awt.Dimension(33, 33));
        saveDbButton.setMinimumSize(new java.awt.Dimension(16, 16));
        saveDbButton.setPreferredSize(new java.awt.Dimension(25, 25));
        saveDbButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                saveDbButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                saveDbButtonMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveDbButtonMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                saveDbButtonMouseReleased(evt);
            }
        });
        saveDbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDbButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveDbButton);

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setDividerSize(2);
        jSplitPane2.setMaximumSize(new java.awt.Dimension(491, 500));

        jScrollPane1.setViewportView(allBillsFromDatabaseTree);
        allBillsFromDatabaseTree.getAccessibleContext().setAccessibleName("allBillsFromDatabaseTree");

        jSplitPane2.setLeftComponent(jScrollPane1);

        placeForBillToShow.setMaximumSize(new java.awt.Dimension(450, 372));
        placeForBillToShow.setMinimumSize(new java.awt.Dimension(450, 372));
        placeForBillToShow.setName(""); // NOI18N
        placeForBillToShow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                placeForBillToShowMouseReleased(evt);
            }
        });

        deviceNameLabel.setText("Device name: ");

        dateOnBillLabel.setText("Date on bill:");

        endOfGuaranteeLabel.setText("End of guarantee:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(endOfGuaranteeLabel)
                            .addComponent(dateOnBillLabel)
                            .addComponent(deviceNameLabel)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(placeForBillToShow, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(203, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(placeForBillToShow, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(deviceNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateOnBillLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(endOfGuaranteeLabel)
                .addGap(0, 28, Short.MAX_VALUE))
        );

        placeForBillToShow.getAccessibleContext().setAccessibleName("placeForBillToShow");

        jSplitPane2.setRightComponent(jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 64, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openDatabaseFileMenuItem.setMnemonic('o');
        openDatabaseFileMenuItem.setText("Open DB");
        openDatabaseFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDatabaseFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openDatabaseFileMenuItem);

        closeDatabaseFileMenuItem.setMnemonic('c');
        closeDatabaseFileMenuItem.setText("Close DB");
        closeDatabaseFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeDatabaseFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(closeDatabaseFileMenuItem);

        saveDatabaseFileMenuItem.setMnemonic('s');
        saveDatabaseFileMenuItem.setText("Save DB As");
        saveDatabaseFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDatabaseFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveDatabaseFileMenuItem);

        saveDatabaseOnServerFileMenuItem.setText("Save DB on Server");
        saveDatabaseOnServerFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDatabaseOnServerFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveDatabaseOnServerFileMenuItem);

        exitMenuItemFileMenuItem.setMnemonic('x');
        exitMenuItemFileMenuItem.setText("Exit");
        exitMenuItemFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemFileMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItemFileMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        addNewBillEditMenuItem.setMnemonic('a');
        addNewBillEditMenuItem.setText("Add new bill");
        addNewBillEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewBillEditMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(addNewBillEditMenuItem);

        editBillEditMenuItem.setMnemonic('e');
        editBillEditMenuItem.setText("Edit selected bill");
        editBillEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBillEditMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(editBillEditMenuItem);

        deleteBillEditMenuItem.setMnemonic('d');
        deleteBillEditMenuItem.setText("Delete selected bill");
        deleteBillEditMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBillEditMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(deleteBillEditMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("About");

        aboutHelpMenuItem.setMnemonic('a');
        aboutHelpMenuItem.setText("About");
        aboutHelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutHelpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutHelpMenuItem);

        showLoggerHelpMenuItem.setText("Show logger");
        showLoggerHelpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showLoggerHelpMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(showLoggerHelpMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 667, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(462, 462, 462)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleName("mainFrame");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * Initizalize left tree with bills from database
     */
    private void initTree(){
        treeModel = menuItems.openDatabaseFromFile(defaultDbPath);
        allBillsFromDatabaseTree.setModel(treeModel);
    }
    
    /**
     * Ends application execution
     * 
     * @param evt user event
     */
    private void exitMenuItemFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemFileMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemFileMenuItemActionPerformed
    
    /**
     * Called when user select from menu to open new database from file
     * 
     * @param evt user event
     */
    private void openDatabaseFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDatabaseFileMenuItemActionPerformed
        File selectedFile = null;
        try{
            selectedFile = menuItems.showFileChooserForDbOpen(jSplitPane2);
        }
        catch(IOException e){
            System.err.println(e.getMessage());
            return;
            
        }
        String path = selectedFile.getPath();
        treeModel = menuItems.openDatabaseFromFile(path);
        allBillsFromDatabaseTree.setModel(treeModel);
        db = menuItems.getDatabaseController();
    }//GEN-LAST:event_openDatabaseFileMenuItemActionPerformed
    
    /**
     * Called when user select from menu to add new bill to database
     * 
     * @param evt user event
     */
    private void addNewBillEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewBillEditMenuItemActionPerformed
        
        AddNewBillDialog dialog = new AddNewBillDialog(this, true, jSplitPane2, db);
        dialog.setLocationRelativeTo(jSplitPane2);
        dialog.setVisible(true);
        
        if (dialog.getReturnStatus() == 1){
            treeModel = menuItems.openDatabase();
            allBillsFromDatabaseTree.setModel(treeModel);
        }
        
    }//GEN-LAST:event_addNewBillEditMenuItemActionPerformed
    
    /**
     * Called when user select from menu to open about application info
     * 
     * @param evt user event
     */
    private void aboutHelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutHelpMenuItemActionPerformed
        menuItems.showHelpOptionPane();
    }//GEN-LAST:event_aboutHelpMenuItemActionPerformed
    
    /**
     * Called when user select from menu to save database in new file
     * 
     * @param evt user event
     */
    private void saveDatabaseFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDatabaseFileMenuItemActionPerformed
        
        File selectedFile = null;        
        try{
            selectedFile = menuItems.showFileChooserForDbSave(jSplitPane2);
        }
        catch(IOException e){
            System.err.println(e.getMessage());
            return;
        }
        if (selectedFile != null){
            String path = selectedFile.getPath();
            menuItems.saveDatabaseToFile(path);
        }
    }//GEN-LAST:event_saveDatabaseFileMenuItemActionPerformed

    /**
     * Called when user select from menu to close already opened database
     * 
     * @param evt 
     */
    private void closeDatabaseFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeDatabaseFileMenuItemActionPerformed
        db = null;
        DefaultMutableTreeNode node = new DefaultMutableTreeNode("Open database");
        treeModel = new DefaultTreeModel(node);
        allBillsFromDatabaseTree.setModel(treeModel);
    }//GEN-LAST:event_closeDatabaseFileMenuItemActionPerformed

    /**
     * Called when user select from menu to edit selected bill
     * 
     * @param evt 
     */
    private void editBillEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBillEditMenuItemActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) allBillsFromDatabaseTree.getLastSelectedPathComponent();                               
        
        int dialogStatus = menuItems.showEditBillDialog(this, node, jSplitPane2);
        
        if (dialogStatus == 1){
            treeModel = menuItems.openDatabase();
            allBillsFromDatabaseTree.setModel(treeModel);
        }
    }//GEN-LAST:event_editBillEditMenuItemActionPerformed
    
    /**
     * Called when user select from menu to delete selected bill
     * 
     * @param evt user event
     */
    private void deleteBillEditMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBillEditMenuItemActionPerformed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) allBillsFromDatabaseTree.getLastSelectedPathComponent();
        
        int dialogStatus = menuItems.showDeleteDialogAndDeleteIfOk(node);
        
        if (dialogStatus == 1){
            menuItems.saveDatabaseToFile(defaultDbPath);
            placeForBillToShow.setIcon(null);
            treeModel = menuItems.openDatabase();
            allBillsFromDatabaseTree.setModel(treeModel);
        }
    }//GEN-LAST:event_deleteBillEditMenuItemActionPerformed

    /**
     * Called when user click on button to save database in default file
     * 
     * @param evt user event
     */
    private void saveDbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDbButtonActionPerformed
        File selectedFile = null;        
        selectedFile = new File(defaultDbPath);
        if (selectedFile != null){
            String path = selectedFile.getPath();
            menuItems.saveDatabaseToFile(path);
        }
    }//GEN-LAST:event_saveDbButtonActionPerformed

    /**
     * Called when user hover save button with cursor (button animation)
     * 
     * @param evt user event
     */
    private void saveDbButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveDbButtonMouseEntered
        try {
            BufferedImage icon = ImageIO.read(new File("resources/saveHov.png"));
            BufferedImage resizedIcon = resizeImage(icon, saveDbButton);
            saveDbButton.setIcon(new ImageIcon(resizedIcon));
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_saveDbButtonMouseEntered
    
    /**
     * Called when user move cursor from save button (button animation)
     * 
     * @param evt user event
     */
    private void saveDbButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveDbButtonMouseExited
        initToolbar();
    }//GEN-LAST:event_saveDbButtonMouseExited

    /**
     * Called when user click on save button (button animation)
     * 
     * @param evt 
     */
    private void saveDbButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveDbButtonMousePressed
        try {
            BufferedImage icon = ImageIO.read(new File("resources/saveClick.png"));
            BufferedImage resizedIcon = resizeImage(icon, saveDbButton);
            saveDbButton.setIcon(new ImageIcon(resizedIcon));
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_saveDbButtonMousePressed

    /**
     * Called when user release save button (button animation)
     * 
     * @param evt 
     */
    private void saveDbButtonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveDbButtonMouseReleased
        try {
            BufferedImage icon = ImageIO.read(new File("resources/saveHov.png"));
            BufferedImage resizedIcon = resizeImage(icon, saveDbButton);
            saveDbButton.setIcon(new ImageIcon(resizedIcon));
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }//GEN-LAST:event_saveDbButtonMouseReleased

    /**
     * Called when user clicks on bill photo to zoom it
     * 
     * @param evt user event
     */
    private void placeForBillToShowMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_placeForBillToShowMouseReleased
        if (selectedBillPhoto != null){
            BufferedImage billImage = null;
            try{
                billImage = ImageIO.read(selectedBillPhoto);
            }
            catch(IOException ex){
                System.err.println(ex.getMessage());
            }
            JDialog showBigBillDialog = new JDialog();
            JPanel panel = new JPanel();
            Dimension billDimension = new Dimension(billImage.getWidth(), billImage.getHeight());
            int optimalHeight = getOptimalPhotoSize(billDimension, "H");
            int optimalWidth = getOptimalPhotoSize(billDimension, "W");
            panel.setSize(optimalWidth, optimalHeight);
            
            BufferedImage resizedImage = resizeImage(billImage, panel);
            JLabel label = new JLabel(new ImageIcon(resizedImage));
            panel.add(label);
            showBigBillDialog.getContentPane().add(panel);
            showBigBillDialog.setSize(optimalWidth, optimalHeight);
            showBigBillDialog.setResizable(false);
            showBigBillDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            showBigBillDialog.setLocationRelativeTo(this);
            showBigBillDialog.setModal(true);
            showBigBillDialog.setVisible(true);
        }
    }//GEN-LAST:event_placeForBillToShowMouseReleased

    /**
     * 
     * @param evt 
     */
    private void showLoggerHelpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showLoggerHelpMenuItemActionPerformed
       AppLogger logger = AppLogger.getInstance();
       logger.setLocationRelativeTo(jSplitPane2);
       logger.setVisible(true);
    }//GEN-LAST:event_showLoggerHelpMenuItemActionPerformed
    
    private void saveDatabaseOnServerFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDatabaseOnServerFileMenuItemActionPerformed
        menuItems.saveDatabaseOnServer(jSplitPane2, defaultDbPath);
    }//GEN-LAST:event_saveDatabaseOnServerFileMenuItemActionPerformed

    /**
     * 
     * Starts application GUI
     */
    public void startGUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }
    
    /**
     * 
     * Called when user clicks on bill in JTree
     */
    public void handleValueChangeInTree(){
        try{
            DefaultMutableTreeNode node = (DefaultMutableTreeNode) allBillsFromDatabaseTree.getLastSelectedPathComponent();

            Bill selectedBill = (Bill) node.getUserObject();
            deviceNameLabel.setText("Device name: " + selectedBill.getName());
            dateOnBillLabel.setText("Date on bill: " + selectedBill.getDateOfGuaranteeToString());
            Date endOfGuarantee = selectedBill.getDateOfGuarantee();

            Calendar calendar = Calendar.getInstance(); 
            calendar.setTime(endOfGuarantee); 
            calendar.add(Calendar.YEAR, selectedBill.getGuaranteeDuration());
            endOfGuarantee = calendar.getTime();

            DateFormat date = new SimpleDateFormat("dd MMM yyyy");
            String endOfGuaranteeString = date.format(endOfGuarantee);                    
            endOfGuaranteeLabel.setText("End of guarantee: " + endOfGuaranteeString);

            selectedBillPhoto = selectedBill.getPhotoFile();
            BufferedImage billImage = ImageIO.read(selectedBillPhoto);
            BufferedImage resizedBillPhoto = resizeImage(billImage, placeForBillToShow);
            placeForBillToShow.setText("");
            placeForBillToShow.setIcon(new ImageIcon(resizedBillPhoto));
        }
        catch(NullPointerException exception)
        {
            clearInformationLabels();
        }
        catch(ClassCastException exception){
            placeForBillToShow.setIcon(null);
            placeForBillToShow.setText("Select bill from tree");
            clearInformationLabels();
        }
        catch(IOException exception){
            System.err.println(exception.getMessage());
            placeForBillToShow.setIcon(null);
            placeForBillToShow.setText("Can not find bill photo.");
            clearInformationLabels();
        }
    }
    
    public void clearInformationLabels(){
        deviceNameLabel.setText("Device name: ");
        dateOnBillLabel.setText("Date on bill: ");
        endOfGuaranteeLabel.setText("End of guarantee: ");
    }
    
    /**
     * Tries to get the best window size for bill photo size
     * 
     * @param billDimension dimensions of the bill
     * @param dimensionName name of size to return - W = width, H = height
     * @return optimal size
     */
    public int getOptimalPhotoSize(Dimension billDimension, String dimensionName){
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double screenWidth = screenSize.getWidth();
        double screenHeight = screenSize.getHeight();
        
        if (dimensionName.equals("W")){
            if(billDimension.getWidth() > screenWidth - 400){
                return (int)(screenWidth - 400);
            }
            else{
                return (int)(billDimension.getWidth());
            }
        }
        else{
            if(billDimension.getHeight()> screenHeight - 400){
                return (int)(screenHeight - 400);
            }
            else{
                return (int)(billDimension.getHeight());
            }
        }
    }
    
    /**
     * 
     * Inits toolbar with save button photo
     */
    private void initToolbar(){
        try {
            BufferedImage icon = ImageIO.read(new File("resources/save.png"));
            BufferedImage resizedIcon = resizeImage(icon, saveDbButton);
            saveDbButton.setIcon(new ImageIcon(resizedIcon));
        } catch (IOException ex) {
            System.err.println(ex.getMessage());
        }
    }
    
    /**
     * Changes size of given image to suit window size
     * 
     * @param originalImage image to change size
     * @param dimensionsSource window where the image will be placed
     * @return image with changed dimensions 
     */
    private BufferedImage resizeImage(BufferedImage originalImage, Component dimensionsSource){
        double factorFromWidth =  (double)originalImage.getWidth() / (double)dimensionsSource.getWidth();
        double factorFromHeight =  (double)originalImage.getHeight()/ (double)dimensionsSource.getHeight();
        
        double factor = 1.0;
        if (factorFromHeight > factorFromWidth){
            factor = factorFromHeight;
        }
        else{
            factor = factorFromWidth;
        }
        
        int IMG_WIDTH = (int)((double)originalImage.getWidth() / factor);
        int IMG_HEIGHT = (int)((double)originalImage.getHeight() / factor);
        
	BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, originalImage.getType());
	Graphics2D g = resizedImage.createGraphics();
	g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
	g.dispose();

	return resizedImage;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutHelpMenuItem;
    private javax.swing.JMenuItem addNewBillEditMenuItem;
    private javax.swing.JTree allBillsFromDatabaseTree;
    private javax.swing.JMenuItem closeDatabaseFileMenuItem;
    private javax.swing.JLabel dateOnBillLabel;
    private javax.swing.JMenuItem deleteBillEditMenuItem;
    private javax.swing.JLabel deviceNameLabel;
    private javax.swing.JMenuItem editBillEditMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JLabel endOfGuaranteeLabel;
    private javax.swing.JMenuItem exitMenuItemFileMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openDatabaseFileMenuItem;
    private javax.swing.JLabel placeForBillToShow;
    private javax.swing.JMenuItem saveDatabaseFileMenuItem;
    private javax.swing.JMenuItem saveDatabaseOnServerFileMenuItem;
    private javax.swing.JButton saveDbButton;
    private javax.swing.JMenuItem showLoggerHelpMenuItem;
    // End of variables declaration//GEN-END:variables

}
