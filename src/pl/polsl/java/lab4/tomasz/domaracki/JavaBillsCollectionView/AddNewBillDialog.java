package pl.polsl.java.lab4.tomasz.domaracki.JavaBillsCollectionView;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.imageio.ImageIO;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JSplitPane;
import javax.swing.KeyStroke;
import static java.nio.file.StandardCopyOption.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import pl.polsl.java.lab4.tomasz.domaracki.JavaBillsCollectionController.BillController;
import pl.polsl.java.lab4.tomasz.domaracki.JavaBillsCollectionController.DatabaseController;

/**
 * Class implements dialog showing when adding new bill to database
 * 
 * @author tomaszdomaracki
 * @version 1.0.0
 */
public class AddNewBillDialog extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;

    private final MenuItemsHandling menuItems;
    private final JSplitPane parentLayout;
    private File selectedBillPhoto;
    private BufferedImage billImage;
    private DatabaseController db;
    private BillController billController;
    
    /**
     * Creates new form AddNewBillDialog
     * 
     * @param parent parent frame
     * @param modal 
     * @param parentLayout parent layout to center new created dialog
     * @param db opened database
     */
    public AddNewBillDialog(java.awt.Frame parent, boolean modal, JSplitPane parentLayout, DatabaseController db) {
        super(parent, modal);
        initComponents();
        menuItems = new MenuItemsHandling(null);
        this.parentLayout = parentLayout;
        this.db = db;
        billController = new BillController();
        selectedBillPhoto = null;
        
        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
    }

    /**
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        photoLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        billNameTextBox = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        billDateTextBox = new javax.swing.JTextPane();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        durationOfGuaranteeTextBox = new javax.swing.JTextPane();
        jLabel3 = new javax.swing.JLabel();
        dateOnBillErrorLabel = new javax.swing.JLabel();
        durationErrorLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        addNewBill = new javax.swing.JMenuItem();

        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        photoLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                photoLabelMouseReleased(evt);
            }
        });

        jScrollPane1.setViewportView(billNameTextBox);

        jLabel1.setText("Device name on the bill:");

        jScrollPane2.setViewportView(billDateTextBox);

        jLabel2.setText("Date on bill: [yyyy/MM/dd]");

        jScrollPane3.setViewportView(durationOfGuaranteeTextBox);

        jLabel3.setText("Duration of the guarantee: [years]");

        File.setText("File");

        addNewBill.setText("Select new bill photo");
        addNewBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewBillActionPerformed(evt);
            }
        });
        File.add(addNewBill);

        jMenuBar1.add(File);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateOnBillErrorLabel)
                                .addGap(269, 362, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(durationErrorLabel))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(dateOnBillErrorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(durationErrorLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(29, Short.MAX_VALUE)
                        .addComponent(photoLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Do actions when user clicks OK button in dialog
     * 
     * @param evt user event
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        boolean inputError = false;
        
        if(selectedBillPhoto != null){
            String billName = billNameTextBox.getText();
            String dateOfGuarantee = billDateTextBox.getText();
            String durationOfGuarantee = durationOfGuaranteeTextBox.getText();
            VerifyUserInput verifier = new VerifyUserInput(durationOfGuarantee, dateOfGuarantee);
            if(!verifier.verifyDateOfGuarantee()){
                dateOnBillErrorLabel.setText("Verify date on bill. [yyyy/MM/dd]");
                inputError = true;
            }
            else{
                dateOnBillErrorLabel.setText("");
            }
            if(!verifier.verifyDurationOfGuarantee()){
                durationErrorLabel.setText("Verify duration of guarantee. Must be a number.");
                inputError = true;
            }
            else{
                durationErrorLabel.setText("");
            }
            if (inputError){
                return;
            }
            int durationOfGuaranteeNumber = Integer.parseInt(durationOfGuarantee);
            
            DateFormat dateFormat = new SimpleDateFormat("dd_HH_mm_ss");
            //get current date time with Date()
            Date date = new Date();
            String newFileName = "\\resources\\";
            newFileName = dateFormat.format(date) + selectedBillPhoto.getName();
            try{
                Files.copy(Paths.get(selectedBillPhoto.getAbsolutePath()), Paths.get(newFileName), REPLACE_EXISTING);
            }
            catch(IOException ex){
                System.err.println(ex.getMessage());
            }
            selectedBillPhoto = new File(newFileName);
            db.addToDatabase((Object) billController.createNewBill(billName, dateOfGuarantee, selectedBillPhoto, durationOfGuaranteeNumber));
            doClose(RET_OK);
        }
        else{
            doClose(RET_CANCEL);
        }
    }//GEN-LAST:event_okButtonActionPerformed
    
    /**
     * Do actions when user clicks CANCEL button in dialog
     * 
     * @param evt user event
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog
    
    /**
     * Called when user select from menu to open new bill photo
     * 
     * @param evt user event
     */
    private void addNewBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewBillActionPerformed
        billImage = null;
        try{
            selectedBillPhoto = menuItems.showFileChooserForImageOpen(parentLayout);
            if (selectedBillPhoto == null){
                return;
            }
            billImage = ImageIO.read(selectedBillPhoto);
        
        BufferedImage resizedBillPhoto = resizeImage(billImage, photoLabel);
        photoLabel.setIcon(new ImageIcon(resizedBillPhoto));
        }
        catch(NullPointerException ex){
            System.err.println(ex.getMessage());
            
            String message = "Sorry... this image is not supported. Please select another.";
            JOptionPane infoBox = new JOptionPane(message, JOptionPane.INFORMATION_MESSAGE);
            JDialog infoDialog = infoBox.createDialog(infoBox, message);
            infoDialog.setTitle("Info");
            infoDialog.setVisible(true);
            return;
        }
        catch(IOException e){
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_addNewBillActionPerformed
    
    /**
     * Called when user clicks on bill photo to zoom it
     * 
     * @param evt user event
     */
    private void photoLabelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoLabelMouseReleased
        if (selectedBillPhoto != null){
            try{
                BufferedImage billImage = ImageIO.read(selectedBillPhoto);
            }
            catch(IOException ex){
                System.err.println(ex.getMessage());
            }
            JDialog showBigBillDialog = new JDialog();
            JPanel panel = new JPanel();
            Dimension billDimension = new Dimension(billImage.getWidth(), billImage.getHeight());
            int optimalHeight = getOptimalPhotoSize(billDimension, "W");
            int optimalWidth = getOptimalPhotoSize(billDimension, "H");
            panel.setSize(optimalWidth, optimalHeight);
            
            BufferedImage resizedImage = resizeImage(billImage, panel);
            JLabel label = new JLabel(new ImageIcon(resizedImage));
            panel.add(label);
            showBigBillDialog.getContentPane().add(panel);
            showBigBillDialog.setSize(optimalWidth, optimalHeight);
            showBigBillDialog.setResizable(false);
            showBigBillDialog.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            showBigBillDialog.setLocationRelativeTo(this);
            showBigBillDialog.setModal(true);
            showBigBillDialog.setVisible(true);
        }
    }//GEN-LAST:event_photoLabelMouseReleased
    
    /**
     * Closes AddNewBillDialog
     * 
     * @param retStatus return which button was clicked
     */
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
    }
    
    /**
     * Tries to get the best window size for bill photo size
     * 
     * @param billDimension dimensions of the bill
     * @param dimensionName name of size to return - W = width, H = height
     * @return optimal size
     */
    public int getOptimalPhotoSize(Dimension billDimension, String dimensionName){
        
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        double screenWidth = screenSize.getWidth();
        double screenHeight = screenSize.getHeight();
        
        if (dimensionName.equals("W")){
            if(billDimension.getWidth() > screenWidth - 400){
                return (int)(screenWidth - 400);
            }
            else{
                return (int)(billDimension.getWidth());
            }
        }
        else{
            if(billDimension.getHeight()> screenHeight - 400){
                return (int)(screenHeight - 400);
            }
            else{
                return (int)(billDimension.getHeight());
            }
        }
    }
    
    /**
     * Changes size of given image to suit window size
     * 
     * @param originalImage image to change size
     * @param objectToGetDimensionsFrom window where the image will be placed
     * @return image with changed dimensions
     */
    private BufferedImage resizeImage(BufferedImage originalImage, Component objectToGetDimensionsFrom){
        double factorFromWidth =  (double)originalImage.getWidth() / (double)objectToGetDimensionsFrom.getWidth();
        double factorFromHeight =  (double)originalImage.getHeight()/ (double)objectToGetDimensionsFrom.getHeight();
        double factor = 1.0;
        if (factorFromHeight > factorFromWidth){
            factor = factorFromHeight;
        }
        else{
            factor = factorFromWidth;
        }
        
        int IMG_WIDTH = (int)((double)originalImage.getWidth() / factor);
        int IMG_HEIGHT = (int)((double)originalImage.getHeight() / factor);//photoLabel.getHeight();// / originalImage.getHeight();
        
	BufferedImage resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, originalImage.getType());
	Graphics2D g = resizedImage.createGraphics();
	g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
	g.dispose();

	return resizedImage;
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem addNewBill;
    private javax.swing.JTextPane billDateTextBox;
    private javax.swing.JTextPane billNameTextBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel dateOnBillErrorLabel;
    private javax.swing.JLabel durationErrorLabel;
    private javax.swing.JTextPane durationOfGuaranteeTextBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel photoLabel;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
